from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.utils import timezone
from .models import RestaurantVerification


@admin.register(RestaurantVerification)
class RestaurantVerificationAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    """
    list_display = (
        'restaurant_name',
        'user_info',
        'status_colored',
        'phone',
        'submitted_at',
        'reviewed_at',
        'has_document',
        'is_updated_after_approval',
        'actions_buttons'
    )
    list_filter = ('status', 'submitted_at', 'reviewed_at')
    search_fields = ('restaurant_name', 'user__email', 'user__first_name', 'user__last_name', 'phone', 'address')
    readonly_fields = ('submitted_at', 'reviewed_at', 'user', 'restaurant_name', 'address', 'phone', 'email', 'description')
    ordering = ('-submitted_at',)
    actions = ['approve_applications', 'reject_applications', 'request_changes']

    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', {
            'fields': ('user', 'user_info_display'),
            'classes': ('collapse',)
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ', {
            'fields': ('restaurant_name', 'description', 'address', 'phone', 'email')
        }),
        ('–î–æ–∫—É–º–µ–Ω—Ç—ã', {
            'fields': ('document_file', 'document_preview'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', {
            'fields': ('status', 'admin_comment', 'submitted_at', 'reviewed_at')
        })
    )

    def user_info(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return format_html(
            '<strong>{}</strong><br/><small>{}</small>',
            obj.user.get_full_name() or obj.user.email,
            obj.user.email
        )
    user_info.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    def user_info_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return format_html(
            '<strong>{}</strong><br/><small>{}</small><br/>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {}',
            obj.user.get_full_name() or obj.user.email,
            obj.user.email,
            obj.user.created_at.strftime('%d.%m.%Y %H:%M')
        )
    user_info_display.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'

    def status_colored(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        colors = {
            'pending': '#f59e0b',  # amber
            'approved': '#10b981',  # emerald
            'rejected': '#ef4444',  # red
            'requires_changes': '#f97316',  # orange
        }
        color = colors.get(obj.status, '#6b7280')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_status_display()
        )
    status_colored.short_description = '–°—Ç–∞—Ç—É—Å'
    status_colored.admin_order_field = 'status'

    def has_document(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç"""
        if obj.document_file:
            return format_html(
                '<a href="{}" target="_blank" style="color: #10b981;">üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>',
                obj.document_file.url
            )
        return format_html('<span style="color: #ef4444;">–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞</span>')
    has_document.short_description = '–î–æ–∫—É–º–µ–Ω—Ç'

    def document_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if obj.document_file:
            return format_html(
                '<a href="{}" target="_blank">üìé –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>',
                obj.document_file.url
            )
        return "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    document_preview.short_description = '–ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞'

    def is_updated_after_approval(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        if (obj.status == 'pending' and
            obj.admin_comment and
            '–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' in obj.admin_comment):
            return format_html(
                '<span style="color: #f97316; font-weight: bold;">üîÑ –ò–∑–º–µ–Ω–µ–Ω–∞</span>'
            )
        return format_html('<span style="color: #6b7280;">‚Äî</span>')
    is_updated_after_approval.short_description = '–ò–∑–º–µ–Ω–µ–Ω–∞'

    def actions_buttons(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        if obj.status == 'pending':
            return format_html(
                '<a href="{}" class="button" style="background: #10b981; color: white; padding: 5px 10px; border-radius: 3px; text-decoration: none; margin-right: 5px;">‚úì –û–¥–æ–±—Ä–∏—Ç—å</a>'
                '<a href="{}" class="button" style="background: #f97316; color: white; padding: 5px 10px; border-radius: 3px; text-decoration: none; margin-right: 5px;">‚ö† –ò–∑–º–µ–Ω–µ–Ω–∏—è</a>'
                '<a href="{}" class="button" style="background: #ef4444; color: white; padding: 5px 10px; border-radius: 3px; text-decoration: none;">‚úó –û—Ç–∫–ª–æ–Ω–∏—Ç—å</a>',
                reverse('admin:verification_restaurantverification_change', args=[obj.pk]) + '?action=approve',
                reverse('admin:verification_restaurantverification_change', args=[obj.pk]) + '?action=request_changes',
                reverse('admin:verification_restaurantverification_change', args=[obj.pk]) + '?action=reject'
            )
        return format_html('<span style="color: #6b7280;">–î–µ–π—Å—Ç–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>')
    actions_buttons.short_description = '–î–µ–π—Å—Ç–≤–∏—è'

    def approve_applications(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫"""
        updated = 0
        for verification in queryset.filter(status='pending'):
            try:
                restaurant = verification.approve('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
                updated += 1
                self.message_user(
                    request,
                    f'–ó–∞—è–≤–∫–∞ –¥–ª—è "{verification.restaurant_name}" –æ–¥–æ–±—Ä–µ–Ω–∞. –°–æ–∑–¥–∞–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω "{restaurant.name}".',
                    level='SUCCESS'
                )
            except Exception as e:
                self.message_user(
                    request,
                    f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è "{verification.restaurant_name}": {e}',
                    level='ERROR'
                )

        self.message_user(request, f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {updated} –∑–∞—è–≤–æ–∫.')
    approve_applications.short_description = '–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'

    def reject_applications(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫"""
        updated = queryset.filter(status='pending').update(
            status='rejected',
            reviewed_at=timezone.now(),
            admin_comment='–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        )
        self.message_user(request, f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ {updated} –∑–∞—è–≤–æ–∫.')
    reject_applications.short_description = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'

    def request_changes(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        updated = queryset.filter(status='pending').update(
            status='requires_changes',
            admin_comment='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'
        )
        self.message_user(request, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {updated} –∑–∞—è–≤–æ–∫.')
    request_changes.short_description = '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫'

    def save_model(self, request, obj, form, change):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if change and obj.status != form.initial.get('status'):
            # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            obj.reviewed_at = timezone.now()

            if obj.status == 'approved':
                try:
                    restaurant = obj.approve(obj.admin_comment)
                    self.message_user(
                        request,
                        f'–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –°–æ–∑–¥–∞–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω "{restaurant.name}".',
                        level='SUCCESS'
                    )
                except Exception as e:
                    self.message_user(
                        request,
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}',
                        level='ERROR'
                    )
            elif obj.status == 'rejected':
                obj.reject(obj.admin_comment)
                self.message_user(request, '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', level='WARNING')
            elif obj.status == 'requires_changes':
                obj.request_changes(obj.admin_comment)
                self.message_user(request, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.', level='INFO')

        super().save_model(request, obj, form, change)
